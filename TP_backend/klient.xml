<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>klient</id>
	<initials>KLI</initials>
	<title>Klient</title>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- DATA -->
	<data type="taskRef">
		<id>address_taskRef</id>
		<title>Adresa</title>
	</data>
	<data type="taskRef">
		<id>address_detail_taskRef</id>
		<title>Adresa detail</title>
	</data>
	<data type="taskRef">
		<id>order_taskRef</id>
		<title>Objednávka</title>
	</data>
	<data type="taskRef">
		<id>order_detail_taskRef</id>
		<title>Objednávka detail</title>
	</data>
	<data type="enumeration_map">
		<id>order_map</id>
		<title>História objednávok</title>
		<action trigger="get">
			<!-- @formatter:off -->
			order_detail_taskRef: f.order_detail_taskRef,
			order_map: f.order_map;

			def groupId = findCase{it.processIdentifier.eq("org_group")
			.and(it.author.id.eq(loggedUser().id))}?.stringId

			def objednavky = findCases({it.processIdentifier.eq(groupId+"_objednavka")
			.and(it.dataSet.get("klient_caseId").value.eq(useCase.stringId))})


			change order_map options {
				[ (""): ""] + objednavky.collectEntries{
					[ (it.stringId): it.title ]
				}
			}

			<!-- @formatter:on -->
		</action>
		<action trigger="set">
			<!-- @formatter:off -->
			order_detail_taskRef:  f.order_detail_taskRef,
			order_map: f.order_map;

			change order_detail_taskRef value {
				if (order_map.value == "") return []

				def view_task = findTask({it.caseId.eq(order_map.value).and(it.transitionId.eq("5"))})

				return view_task == null ? [] : [view_task.stringId]
			}

			<!-- @formatter:on -->
		</action>
	</data>
	<data type="taskRef">
		<id>contact_taskRef</id>
		<title>contact_edit</title>
	</data>
	<data type="taskRef">
		<id>contact_detail_taskRef</id>
		<title>contact_visible</title>
	</data>
	<data type="taskRef">
		<id>cart_taskRef</id>
		<title>Košík</title>
	</data>
	<data type="taskRef">
		<id>cart_detail_taskRef</id>
		<title>Košík</title>
	</data>
	<data type="text">
		<id>filter_category</id>
		<title>Kategória</title>
	</data>
	<data type="enumeration_map">
		<id>filter_result</id>
		<title>Nájdené produkty</title>
		<action trigger="get">
			<!-- @formatter:off -->
			category_field: f.filter_category,
			product_list: f.this;

			def groupId = findCase{it.processIdentifier.eq("org_group")
									.and(it.author.id.eq(loggedUser().id))}?.stringId

			def products = findCases{ it.processIdentifier.eq("${groupId}_produkt" as String) }
			def filtered_products = []

			def category = category_field.value?.trim()

			<!-- filter products by category -->
			if (category != null &amp;&amp; !category.isEmpty()) {
				for (product in products) {
					def product_category = product.dataSet["category_type"].value

					if (product_category.equals(category)) {
						filtered_products.add(product)
					}
				}
			}
			else {
				filtered_products = products
			}

			change product_list options {
				filtered_products.collectEntries {
					[(it.stringId): it.dataSet["prod_name"].value]
				}
			}
			<!-- @formatter:on -->
		</action>
	</data>
	<data type="enumeration_map">
		<id>top_products</id>
		<title>Najlepšie hodnotené produkty</title>
		<action trigger="get">
			product_map: f.this;

			def groupId = findCase{it.processIdentifier.eq("org_group")
									.and(it.author.id.eq(loggedUser().id))}?.stringId

			def products = findCases{ it.processIdentifier.eq("${groupId}_produkt" as String) }
								.collectEntries { [(it.stringId): it.dataSet["average_review"].value] }
								.sort{ -it.value }

			def top_products = new LinkedHashMap&lt;&gt;()

			def i = 0
			for (product in products.entrySet()) {
				if (i &lt; 7) {
					top_products.put(product.key, product.value)
					i += 1
				}
				else {
					break
				}
			}

			change product_map options {
				top_products
			}
		</action>
	</data>
	<data type="enumeration_map">
		<id>most_selled</id>
		<title>Najpredávanejšie</title>
		<action trigger="get">
			product_map: f.this;

			def groupId = findCase{it.processIdentifier.eq("org_group")
			.and(it.author.id.eq(loggedUser().id))}?.stringId

			def sorted_products = findCases{ it.processIdentifier.eq("${groupId}_produkt_v_kosiku" as String)
												.and(it.dataSet.get("delete").value.eq(false))
								}
								.groupBy { it.dataSet["product_ref"].value }

			for (product in sorted_products) {
				product.value = product.value.collect{ it.dataSet["count"].value as Integer }.sum()
			}
			sorted_products = sorted_products.sort{ -it.value }

			def top_products = new LinkedHashMap&lt;&gt;()

			def i = 0
			for (product in sorted_products.entrySet()) {
				if (i &lt; 7) {
					top_products.put(product.key, product.value)
					i += 1
				}
				else {
					break
				}
			}

			change product_map options {
				top_products
			}
		</action>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>260</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie klientského účtu</label>
		<icon>person_add</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>contact_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>address_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>1_assign</id>
			<actions phase="pre">
				<action>
					adresa_ref: f.address_taskRef,
					contact_ref: f.contact_taskRef;

					def groupId = findCase{it.processIdentifier.eq("org_group")
					.and(it.author.id.eq(loggedUser().id))}?.stringId

					def kontakt = createCase("${groupId}_kontakt", "Kontakt klienta")
					def kont_konstruktor = assignTask("2", kontakt)
					change contact_ref value { [kont_konstruktor.stringId] }

					def adresa = createCase("${groupId}_adresa", "Adresa klienta")
					def adr_konstruktor = assignTask("2", adresa)
					change adresa_ref value { [adr_konstruktor.stringId] }

				</action>
			</actions>
		</event>
		<event type="finish">
			<id>1_finish</id>
			<actions phase="pre">
				<action>
					adresa_ref_visible: f.address_detail_taskRef,
					adresa_ref: f.address_taskRef,
					kontakt_ref_visible: f.contact_detail_taskRef,
					kontakt_ref_editable: f.contact_taskRef;

					def kont_konstruktor = findTask(kontakt_ref_editable.value[0])
					finishTask(kont_konstruktor)

					def kont_edit_task = findTask({ it.caseId.eq(kont_konstruktor.caseId).and(it.transitionId.eq("5"))})
					change kontakt_ref_editable value {
					[kont_edit_task.stringId]
					}

					def kont_view_task = findTask({ it.caseId.eq(kont_konstruktor.caseId).and(it.transitionId.eq("4"))})
					change kontakt_ref_visible value {
					[kont_view_task.stringId]
					}

					def adr_konstruktor = findTask(adresa_ref.value[0])
					finishTask(adr_konstruktor)

					def adr_edit_task = findTask({ it.caseId.eq(adr_konstruktor.caseId).and(it.transitionId.eq("5"))})
					change adresa_ref value {
					[adr_edit_task.stringId]
					}

					def adr_view_task = findTask({ it.caseId.eq(adr_konstruktor.caseId).and(it.transitionId.eq("4"))})
					change adresa_ref_visible value {
					[adr_view_task.stringId]
					}

				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>4</id>
		<x>460</x>
		<y>20</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Info o klientskom konte</label>
		<icon>info</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<title>Adresa</title>
			<dataRef>
				<id>address_detail_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>contact_detail_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>5</id>
		<x>460</x>
		<y>420</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Aktualizovať informácie</label>
		<icon>edit</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<title>Adresa</title>
			<dataRef>
				<id>address_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>contact_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>6</id>
		<x>660</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zmazať klientský účet</label>
		<icon>delete</icon>
		<assignPolicy>auto</assignPolicy>
		<event type="finish">
			<id>6_finish</id>
			<actions phase="pre">
				<action>
					contact_detail_taskRef: f.contact_detail_taskRef,
					address_visible_taskref: f.address_detail_taskRef;
				
					def view_task = findTask(address_visible_taskref.value[0])

					<!-- vymazanie adresy -->
					def delete_task = findTask({ it.caseId.eq(view_task.caseId).and(it.transitionId.eq("6"))})
					assignTask(delete_task)
					finishTask(delete_task)

					view_task = findTask(contact_detail_taskRef.value[0])

					<!-- vymazanie kontaktu -->
					delete_task = findTask({ it.caseId.eq(view_task.caseId).and(it.transitionId.eq("6"))})
					assignTask(delete_task)
					finishTask(delete_task)

				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>19</id>
		<x>340</x>
		<y>580</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Nakupovať</label>
		<icon>add_shopping_cart</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>cart_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>19_assign</id>
			<actions phase="pre">
				<action>

					cart_taskRef: f.cart_taskRef;

					def groupId = findCase{it.processIdentifier.eq("org_group")
					.and(it.author.id.eq(loggedUser().id))}?.stringId

					kosik = createCase("${groupId}_cart", "Nákupný košík")
					def edit_task = assignTask("2", kosik)

					change cart_taskRef value { [edit_task.stringId] }

				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>61</id>
		<x>460</x>
		<y>580</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Objednať</label>
		<icon>shopping_cart</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>order_taskRef</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>61_assign</id>
			<actions phase="pre">
				<action>

					address_detail_taskRef: f.address_detail_taskRef,
					contact_detail_taskRef: f.contact_detail_taskRef,
					cart_taskRef: f.cart_taskRef,
					order_taskRef: f.order_taskRef;

					def groupId = findCase{it.processIdentifier.eq("org_group")
					.and(it.author.id.eq(loggedUser().id))}?.stringId

					def timestamp = new Date().getTime() as String

					def objednavka = createCase("${groupId}_objednavka", "Objednávka ${timestamp}")
					def constructor = assignTask("2", objednavka)

					def edit_cart_task = findTask(cart_taskRef.value[0])

					setData(edit_cart_task, [
					"objednavka_caseId": ["value": objednavka.stringId,"type": "text"]
					])

					def cart_data = getData(edit_cart_task)

					setData(constructor, [
					"klient_caseId": ["value": useCase.stringId,"type": "text"],
					"itemsInCartRef": ["value": [cart_taskRef.value[0] as String],"type": "taskRef"],
					"addressReadRef": ["value": [address_detail_taskRef.value[0] as String],"type": "taskRef"],
					"contactReadRef": ["value": [contact_detail_taskRef.value[0] as String],"type": "taskRef"]
					])

					change order_taskRef value {
					[constructor.stringId]
					}

				</action>
			</actions>
		</event>
		<event type="finish">
			<id>61_finish</id>
			<actions phase="pre">
				<action>
					cart_taskRef: f.cart_taskRef,
					order_taskRef: f.order_taskRef;

					def edit_task = findTask(cart_taskRef.value[0])
					finishTask(edit_task)

					def close_cart_task = findTask({ it.caseId.eq(edit_task.caseId).and(it.transitionId.eq("8"))})
					def view_task = findTask({ it.caseId.eq(edit_task.caseId).and(it.transitionId.eq("11"))})

					change cart_taskRef value {
						[view_task.stringId]
					}

					assignTask(close_cart_task)
					finishTask(close_cart_task)

					<!-- inject cart read into order -->
					def constructor = findTask(order_taskRef.value[0])

					setData(constructor, [
						"itemsInCartRef": ["value": [view_task.stringId],"type": "taskRef"]
					])

					finishTask(constructor)
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>22</id>
		<x>460</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>História objednávok</label>
		<icon>storage</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>order_map</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>order_detail_taskRef</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>22_assign</id>
			<actions phase="pre">
				<action>
					order_map: f.order_map;
					change order_map value { ("") as String }

				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>76</id>
		<x>580</x>
		<y>580</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vyprázdniť košík</label>
		<icon>cancel</icon>
		<assignPolicy>auto</assignPolicy>
		<finishPolicy>auto_no_data</finishPolicy>
		<event type="finish">
			<id>76_finish</id>
			<actions phase="pre">
				<action>
					cart_taskRef: f.cart_taskRef;

					def edit_task = findTask(cart_taskRef.value[0])
					finishTask(edit_task)

					def empty_cart_task = findTask{
						it.caseId.eq(edit_task.caseId)
						.and(it.transitionId.eq("12"))
					}

					assignTask(empty_cart_task)
					finishTask(empty_cart_task)
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>82</id>
		<x>380</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Filtrovať produkty</label>
		<icon>search</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>filter_category</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>filter_result</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>86</id>
		<x>540</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Top produkty</label>
		<icon>star</icon>
		<assignPolicy>auto</assignPolicy>
		<finishPolicy>auto_no_data</finishPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>top_products</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>most_selled</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>

	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>140</x>
		<y>260</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>3</id>
		<x>460</x>
		<y>260</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>7</id>
		<x>460</x>
		<y>500</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>8</id>
		<x>780</x>
		<y>260</y>
		<label>Vymazané klientské konto</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>60</id>
		<x>460</x>
		<y>660</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>65</id>
		<x>460</x>
		<y>100</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>66</id>
		<x>460</x>
		<y>340</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>81</id>
		<x>460</x>
		<y>780</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>9</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>10</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>11</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>260</x><y>500</y></breakPoint>
	</arc>
	<arc>
		<id>14</id>
		<type>regular</type>
		<sourceId>3</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>15</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>660</x><y>500</y></breakPoint>
	</arc>
	<arc>
		<id>17</id>
		<type>regular</type>
		<sourceId>6</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>20</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>19</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>23</id>
		<type>read</type>
		<sourceId>3</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>62</id>
		<type>regular</type>
		<sourceId>19</sourceId>
		<destinationId>60</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>340</x><y>660</y></breakPoint>
	</arc>
	<arc>
		<id>64</id>
		<type>regular</type>
		<sourceId>61</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>68</id>
		<type>read</type>
		<sourceId>65</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>69</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>65</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>260</x><y>100</y></breakPoint>
	</arc>
	<arc>
		<id>70</id>
		<type>regular</type>
		<sourceId>65</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>660</x><y>100</y></breakPoint>
	</arc>
	<arc>
		<id>71</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>66</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>260</x><y>340</y></breakPoint>
	</arc>
	<arc>
		<id>72</id>
		<type>regular</type>
		<sourceId>66</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>660</x><y>340</y></breakPoint>
	</arc>
	<arc>
		<id>73</id>
		<type>regular</type>
		<sourceId>66</sourceId>
		<destinationId>5</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>420</x><y>380</y></breakPoint>
	</arc>
	<arc>
		<id>74</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>66</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>500</x><y>380</y></breakPoint>
	</arc>
	<arc>
		<id>77</id>
		<type>regular</type>
		<sourceId>60</sourceId>
		<destinationId>61</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>78</id>
		<type>regular</type>
		<sourceId>60</sourceId>
		<destinationId>76</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>580</x><y>660</y></breakPoint>
	</arc>
	<arc>
		<id>79</id>
		<type>regular</type>
		<sourceId>76</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>83</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>81</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>260</x><y>780</y></breakPoint>
	</arc>
	<arc>
		<id>84</id>
		<type>regular</type>
		<sourceId>81</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>660</x><y>780</y></breakPoint>
	</arc>
	<arc>
		<id>85</id>
		<type>read</type>
		<sourceId>81</sourceId>
		<destinationId>82</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>380</x><y>820</y></breakPoint>
	</arc>
	<arc>
		<id>87</id>
		<type>read</type>
		<sourceId>81</sourceId>
		<destinationId>86</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>540</x><y>820</y></breakPoint>
	</arc>
</document>
