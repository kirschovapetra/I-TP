<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>kurier</id>
	<initials>KUR</initials>
	<title>Kuriér</title>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- PROCESS ROLE REFS -->
	<!-- PROCESS USER REFS -->
	<!-- DATA -->
	<data type="taskRef">
		<id>contact_edit_taskref</id>
		<title>contact_edit</title>
	</data>
	<data type="taskRef">
		<id>contact_visible_taskref</id>
		<title>contact_visible</title>
	</data>
	<data type="taskRef">
		<id>taskRef_1</id>
		<title>nove_hodnotenie</title>
	</data>
	<data type="taskRef">
		<id>reviews_taskref</id>
		<title></title>
	</data>
	<data type="number">
		<id>average_review</id>
		<title>Priemerné hodnotenie</title>
		<action trigger="get">
			hodnotenia: f.reviews_taskref,
			priemer: f.average_review;

			if (hodnotenia.value?.size() &gt; 0) {
			double priemerne_hodnotenie = 0
			for (def hodnotenie : hodnotenia.value) {
			def view_task = findTask(hodnotenie)
			def data = getData(view_task)
			priemerne_hodnotenie += (data["review_stars"].value as String).length()
			}
			change priemer value {
			(priemerne_hodnotenie / (hodnotenia.value.size() as double)).round(1)
			}
			}
		</action>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>420</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvoriť kuriéra</label>
		<icon>person_add</icon>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>contact_edit_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>1_assign</id>
			<actions phase="pre">
				<action>
					contact_ref: f.contact_edit_taskref;

					def groupId = findCase{it.processIdentifier.eq("org_group")
					.and(it.author.id.eq(loggedUser().id))}?.stringId

					def kontakt = createCase("${groupId}_kontakt", "Kontakt kuriera")
					def konstruktor = assignTask("2", kontakt)
					change contact_ref value {
					[konstruktor.stringId]
					}
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>1_finish</id>
			<actions phase="pre">
				<action>
					kontakt_ref_visible: f.contact_visible_taskref,
					kontakt_ref_editable: f.contact_edit_taskref;

					def konstruktor = findTask(kontakt_ref_editable.value[0])
					finishTask(konstruktor)

					def edit_task = findTask({ it.caseId.eq(konstruktor.caseId).and(it.transitionId.eq("5"))})
					change kontakt_ref_editable value {
					[edit_task.stringId]
					}

					def view_task = findTask({ it.caseId.eq(konstruktor.caseId).and(it.transitionId.eq("4"))})
					change kontakt_ref_visible value {
					[view_task.stringId]
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>4</id>
		<x>540</x>
		<y>60</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zobrazenie informácií o kuriérovi</label>
		<icon>info</icon>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>contact_visible_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>5</id>
		<x>660</x>
		<y>380</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Upraviť informácie o kuriérovi</label>
		<icon>create</icon>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>contact_edit_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>6</id>
		<x>660</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Delete</label>
		<icon>delete</icon>
		<event type="finish">
			<id>1_finish</id>
			<actions phase="post">
				<action>
					contact_visible_taskref: f.contact_visible_taskref;
					def contact_visible_task = findTask(contact_visible_taskref.value[0])
					def delete_task = findTask({ it.caseId.eq(contact_visible_task.caseId).and(it.transitionId.eq("6"))})
					assignTask(delete_task)
					finishTask(delete_task)
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t1</id>
		<x>700</x>
		<y>60</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zobraziť hodnotenie</label>
		<icon>star</icon>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>reviews_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>average_review</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t2</id>
		<x>540</x>
		<y>460</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Pridať hodnotenie</label>
		<icon>star_half</icon>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>taskRef_1</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t2_assign</id>
			<actions phase="pre">
				<action>taskref: f.taskRef_1;

					def groupId = findCase{it.processIdentifier.eq("org_group").and(it.author.id.eq(loggedUser().id))}?.stringId
					def hodnotenie = createCase("${groupId}_hodnotenie" as String, "Hodnotenie firmy ${useCase.title}" as String)
					def konstruktor = assignTask("2", hodnotenie)
					change taskref value {
					[konstruktor.stringId]
					}
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>t2_finish</id>
			<actions phase="pre">
				<action>hodnotenia: f.reviews_taskref,
					taskref: f.taskRef_1;

					def konstruktor = findTask(taskref.value[0])
					setData(konstruktor, [
					"id_predmetu_hodnotenia": [
					"value": useCase.stringId,
					"type": "text"
					]
					])
					finishTask(konstruktor)

					def view_task = findTask({ it.caseId.eq(konstruktor.caseId).and(it.transitionId.eq("6"))})
					change hodnotenia value {
					if (hodnotenia.value == null) {
					return [view_task.stringId]
					} else {
					return [view_task.stringId] + hodnotenia.value
					}
					}</action>
			</actions>
		</event>
	</transition>
	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>300</x>
		<y>260</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>7</id>
		<x>540</x>
		<y>260</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>8</id>
		<x>820</x>
		<y>260</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p1</id>
		<x>540</x>
		<y>180</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p2</id>
		<x>540</x>
		<y>340</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>9</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>11</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>12</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>13</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>15</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>17</id>
		<type>regular</type>
		<sourceId>6</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a1</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>p1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a2</id>
		<type>regular</type>
		<sourceId>p1</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a3</id>
		<type>read</type>
		<sourceId>p1</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a4</id>
		<type>read</type>
		<sourceId>p1</sourceId>
		<destinationId>t1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>regular</type>
		<sourceId>p2</sourceId>
		<destinationId>t2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a6</id>
		<type>regular</type>
		<sourceId>t2</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a7</id>
		<type>regular</type>
		<sourceId>p2</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a8</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>